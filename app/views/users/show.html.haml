- title @user.first_name, show_title:false

.row
  .span3
    = render @user, avatar:512, name:false, classes:'user-fit-width', link:false
    %hr/
    .karma-icons
      - @user.karma.times do
        = user_karma_symbol
  .span6
    .section
      %h1= @user.login.full_name
      .roles= user_roles_sentence(@user)

    %ul
      - if @user.last_seen_at
        %li= _('Was last seen on %{app_name} %{time_ago} ago') % { app_name: configatron.app_name, time_ago: time_ago_in_words(@user.last_seen_at) }
      %li= _('Has %{count} %{karma_symbol}').html_safe % { count:@user.karma, karma_symbol:user_karma_symbol }
      %li= _('Has Ã—%{count} voting power.') % { count:@user.voting_power }
      - if count = @user.ideas.count and count > 0
        %li= n_('Has submitted an idea', 'Has submitted %{count} ideas', count) % { count:count }
      - if count = @user.vetted_ideas.count and count > 0
        %li= n_('Has vetted one idea', 'Has vetted %{count} ideas', count) % { count:count }
      -# the count.count below is due to some association wierdnees
      - if count = @user.backed_ideas.count.count and count > 0
        %li= n_('Is a backer of one idea', 'Is a backer of %{count} ideas', count) % { count:count }
      - if count = @user.notifications.unread.count and count > 0
        %li= n_('Has an unread notification', 'Has %{count} unread notifications', count) % { count:count }

  .span3

    = link_to users_path, class: 'btn btn-block' do
      = _("View all users")
    = can_link_to edit_user_path(@user), auth:[:edit, @user], class: 'btn btn-block' do
      %i.icon-pencil
      = _("Edit %{user}") % { user:@user.first_name }

    :ruby
      classes = %w(btn btn-block)
      other_state = @user.visible? ? :hidden : :visible
      classes << 'active' if @user.hidden?
    = can_link_to user_path(@user, user:{ state:User.state_value(other_state) }), method: :put, auth:[:update_admin, @user], class:classes, title:_('This will make the user unable to access this team anymore; they will also stop receiving emails. You will still see them in the user list, only greyed out.'), :'data-placement' => 'left', :'data-container' => '.container' do
      %i.icon-eye-close
      = _("Hide %{user}") % { user:@user.first_name }

    = can_link_to user_path(@user), method: :delete, auth:[:destroy, @user], class: 'btn btn-block', confirm:_('Are you really, really sure? We recommend that you only ever hide users.'), title:_('Obliterate all of this user\'s data, including any idea they\'ve posted, comments written, endorsements cast, and so on. You should really just hide users, which prevents them from logging in or receiving emails.'), :'data-placement' => 'left', :'data-container' => '.container' do
      %i.icon-trash
      = _("Destroy %{user}") % { user:@user.first_name }

    %h4= _('Roles')

    .btn-group.btn-group-vertical.btn-block
      - User::Role::Names.each do |role_name|
        - if role = @user.role_named(role_name)
          = can_link_to user_role_path(@user, role), auth:[:destroy, role], method: :delete, class:'btn active', :'data-placement' => 'left' do
            = user_role_name(role_name)
        - else
          = can_link_to user_roles_path(@user, user_role: {name: role_name}), auth:[:create, User::Role], method: :post, class:'btn', :'data-placement' => 'left' do
            = user_role_name(role_name)

    - if current_user.plays?(:account_owner)
      %hr/
      = link_to session_path(user_id:@user.id), method: :put, class: 'btn btn-block' do
        %i.icon-user-md
        = _('Act as user')
